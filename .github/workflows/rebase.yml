name: Rebase Open PRs on Merge
on:
  push:
    branches:
      - main  
jobs:
  rebase:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy"  # Replace with your GitHub username
          git config user.email "vishnu4reddy@users.noreply.github.com"  # Replace with your GitHub username
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Get list of open PRs
        id: pr_list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Make sure your token has the right permissions
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "Open PRs: $prs"  # Debugging to print the output
          echo "prs='$prs'" >> $GITHUB_ENV  # Setting the variable to be usable in next steps
      - name: Debug PR List Output
        run: |
          echo "Debugging PR List Output: ${{ env.prs }}"
          
      - name: Rebase each open PR
        run: |
          set -x
          git fetch origin  # Get all branches
          
          # Verify we received PRs
          if [[ -z "${{ env.prs }}" ]]; then
            echo "No open PRs found."
            exit 0  # Exit gracefully if no PRs are found
          fi
          
          echo "The following PRs were found: ${{ env.prs }}"
          
          IFS=$'\n'  # Use newline as a delimiter
          for pr in ${{ env.prs }}; do
            echo "Processing PR: $pr"  # Log the entire entry for debugging
            
            # Split the output into pr_number and pr_branch
            pr_number=$(echo "$pr" | awk '{print $1}')
            pr_branch=$(echo "$pr" | awk '{print $2}')
            
            echo "Extracted PR number: $pr_number and branch: $pr_branch"
            
            if [[ -z "$pr_branch" ]]; then
              echo "Error: Branch name for PR #$pr_number is empty."
              continue  # Continue the loop instead of exiting if a branch is not found
            fi
            # Checkout the branch
            git checkout "$pr_branch" || { echo "Failed to checkout $pr_branch"; exit 1; }
            echo "Checked out branch $pr_branch"
            # Rebase the branch
            git rebase origin/main || { echo "Rebase failed for $pr_branch"; exit 1; }
            echo "Rebase successful for $pr_branch"
            # Push the rebased branch
            git push origin "$pr_branch" --force-with-lease || { echo "Failed to push $pr_branch"; exit 1; }
            echo "Successfully pushed changes for $pr_branch"
          done
