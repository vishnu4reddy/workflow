name: Rebase Open PRs on Merge
on:
  push:
    branches:
      - main 
jobs:
  rebase:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy"  # Replace with your GitHub username
          git config user.email "vishnu4reddy@users.noreply.github.com"  # Ensure this email is valid
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Get list of open PRs
        id: pr_list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure your token has proper permissions
        run: |
          # Fetching open PRs
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "Open PRs: '$prs'"  # Quoting output for better visibility
          
          # Check if no PRs were returned
          if [[ -z "$prs" ]]; then
            echo "No open PRs found."
            exit 0
          fi
          # Directly assign the raw list to GITHUB_ENV
          IFS=$'\n'          # Set IFS to newline for reading
          for pr in $prs; do
            # Trim whitespace and set as environment variable for each PR
            echo "Setting pr_value: '$pr'"  # Debug output
            echo "pr_value=$pr" >> $GITHUB_ENV  # Use this format
          done
      - name: Debug PR List Output
        run: |
          echo "Debugging PR List Output:"
          # This will print all pr_value entries set
          printenv | grep pr_value 
          
      - name: Rebase each open PR
        run: |
          set -x
          git fetch origin  # Get all branches
          # Loop through each pr_value set in the environment
          for pr in $(printenv | grep pr_value | cut -d'=' -f2); do
            echo "Processing PR: '$pr'"
            pr_number=$(echo "$pr" | awk '{print $1}')  # Expected first column as number
            pr_branch=$(echo "$pr" | awk '{print $2}')  # Expected second column as branch
            echo "Extracted PR number: $pr_number and branch: $pr_branch"
            if [[ -z "$pr_branch" ]]; then
              echo "Error: Branch name for PR #$pr_number is empty."
              continue
            fi
            # Checkout the branch
            git checkout "$pr_branch" || { echo "Failed to checkout $pr_branch"; exit 1; }
            echo "Checked out branch $pr_branch"
            # Attempt to rebase the branch
            if ! git rebase origin/main; then
              echo "Rebase failed for $pr_branch due to conflicts. Skipping this PR."
              git rebase --abort  # Abort the rebase process to avoid issues
              continue  # Skip to the next PR
            fi
            
            echo "Rebase successful for $pr_branch"
            # Push the rebased branch
            git push origin "$pr_branch" --force-with-lease || { echo "Failed to push $pr_branch"; exit 1; }
            echo "Successfully pushed changes for $pr_branch"
          done
